from random import randint, choice

def make_dict(text):
    '''
    returns a dictionary:
    keys: each word in text 
    values: dictionary of all the words appeared next to the key word (keys), and their frequencies (values)

    text: a string
    '''
    words = text.split()
    wordict = {}

    for i in range(1, len(words)):
        if words[i-1] not in wordict:
            wordict[words[i-1]] = {}
        if words[i] not in wordict[words[i-1]]:
            wordict[words[i-1]][words[i]] = 0
        wordict[words[i-1]][words[i]] += 1

    return wordict

def sum_freq(dict):
    '''
    returns the sum of all values in dict

    dict: a dictionary 
    '''
    sum = 0
    for value in dict.values():
        sum += value
    return sum

def retrive_random_word(dict):
    '''
    return a random word choosing from the keys in dict 
    the probability of each key being returned = its value / sum of all values 

    dict: a dictionary (keys: words; values: frequency of words)
    '''
    randindex = randint(1, sum_freq(dict))
    for key, value in dict.items():
        randindex -= value
        if randindex <= 0:
            return key

def markov(filename, length, currentword = None):
    '''
    returns a chain (list) of words generated by the Markov model

    filename: string, path to source data
    length: int, desired length of Markov chain output
    currentword: str, the first word of the chain
    '''
    with open(filename,'r') as f:
        t = str(f.read())
        wordict = make_dict(t)

    chain = []
    
    # randomly choose a word from dict if the 'currentword' parameter is null
    currentword = currentword or choice(list(wordict.keys()))

    # generates a chain with desired length
    for _ in range(0, length):
        chain.append(currentword)
        currentword = retrive_random_word(wordict[currentword])
    
    # generates more words until the last one is a punctuation
    end_punc = ['.', '?', '!', '...']
    while chain[-1] not in end_punc:
        currentword = retrive_random_word(wordict[currentword])
        chain.append(currentword)
        
    return chain

def format_chain(c):
    '''
    returns a string, formats a Markov chain list in a reader friendly view

    c: a list of Markov chain
    '''
    punc = [',', '.', '?', ';', ':', '!', '...']
    end_punc = ['.', '?', '!', '...']
    s = ''

    for i, w in enumerate(c):
        # captialization
        if i == 0:
            w = w.capitalize()
        else:
            if c[i-1] in end_punc:
                w = w.capitalize()
        
        # spacing
        if i < len(c)-1:
            if c[i+1] not in punc:
                s += w + ' '
            else:
                s += w
        else:
            s += w
    
    return s
        
def main():
    chain = format_chain(markov('Markov analysis/Mark Twain.txt', length = 50, currentword = 'i'))

    # with open("Markov analysis/new book.txt",'a') as f:
    #     f.write(chain + '\n\n')
    
    print(chain)
    
if __name__ == "__main__":
    main()
